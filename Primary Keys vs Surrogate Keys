üìò Primary Keys vs Surrogate Keys in SQL
üîπ 1. What is a Key?

A key in a relational database uniquely identifies a record (row) in a table.
It ensures data integrity and supports relationships (joins, constraints, etc.).

Two common types of unique identifiers are:

Natural (Primary) Keys

Surrogate Keys

üîπ 2. Primary (Natural) Key ‚Äì Definition

A Primary Key (often a Natural Key) is a column or set of columns that uniquely identifies a record using real-world, business data.

‚úÖ Characteristics:

Derived from the business domain (meaningful to users).

Can be single or composite.

Used as the main identifier for relationships (foreign keys).

Prevents duplicate records.

üß© Example 1 ‚Äì Primary (Natural) Key
CREATE TABLE Employees
(
    EmployeeID VARCHAR(10) PRIMARY KEY,   -- Natural Key (e.g., EMP1001)
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100) UNIQUE,
    HireDate DATE
);


Here, EmployeeID (e.g., EMP1001) or even Email could serve as the natural primary key because it uniquely identifies an employee and has business meaning.

‚úÖ Pros of Primary (Natural) Keys
Advantage	Explanation
Meaningful	Represents real business information (like SSN, Email, or OrderNumber).
No extra column	Doesn‚Äôt require generating a synthetic ID.
Simplicity for small systems	Easy to identify and use for simple tables.
‚ö†Ô∏è Cons of Primary (Natural) Keys
Disadvantage	Explanation
Changes over time	Real-world values may change (e.g., email, phone).
Large size	Natural keys can be long strings ‚Üí larger indexes & joins.
Composite keys	Often require multiple columns ‚Üí complexity in joins.
Exposes business info	Reveals sensitive identifiers like SSN or Email.
üîπ 3. Surrogate Key ‚Äì Definition

A Surrogate Key is an artificial, system-generated unique identifier for a record ‚Äî not derived from business data.

‚úÖ Characteristics:

Usually an auto-incremented integer (IDENTITY) or GUID.

Has no business meaning.

Never changes.

Used purely for technical identification.

üß© Example 2 ‚Äì Surrogate Key
CREATE TABLE Employees
(
    EmployeeID INT IDENTITY(1,1) PRIMARY KEY,  -- Surrogate Key
    EmployeeCode VARCHAR(10),
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    HireDate DATE
);


Here:

EmployeeID is a surrogate key ‚Äî just a number.

Business users recognize EmployeeCode, but the database uses EmployeeID for joins and relationships.

‚úÖ Pros of Surrogate Keys
Advantage	Explanation
Never changes	Independent of business logic; stable identifier.
Simplifies relationships	Easier joins ‚Äî single integer column.
Efficient indexing	Numeric and sequential ‚Üí better performance.
Hides business logic	Prevents exposure of sensitive data (e.g., SSN).
Supports data migration	Easier to merge data from different systems.
‚ö†Ô∏è Cons of Surrogate Keys
Disadvantage	Explanation
No business meaning	Users can‚Äôt recognize records by surrogate values.
Requires unique constraint	Still need a UNIQUE key on business data to prevent duplicates.
Potential data anomalies	Without validation, duplicates in business data may occur.
üîπ 4. Composite Keys

A composite key is a combination of two or more columns that together uniquely identify a record.

üß© Example
CREATE TABLE Orders
(
    OrderID INT,
    ProductID INT,
    Quantity INT,
    PRIMARY KEY (OrderID, ProductID)
);


This is a composite natural key ‚Äî both columns together uniquely define a record.

üîπ 5. Comparison Table
Feature	Primary (Natural) Key	Surrogate Key
Definition	Real-world data uniquely identifies record	Artificial identifier (system-generated)
Meaningful	Yes	No
Changeable	Often changes	Never changes
Data Type	String, Composite, or Business Code	Integer, BIGINT, or GUID
Performance	May be slower (string joins)	Faster (integer joins)
Ease of Use	Complex in relationships	Simple and consistent
Uniqueness	Based on business rule	Always unique (system managed)
Storage	Larger (especially for strings)	Smaller, efficient for indexing
Preferred Use Case	Small or static datasets	Large, evolving systems with frequent joins
üîπ 6. Best Practices

‚úÖ Use Surrogate Keys for:

Large transactional systems (ERP, CRM, etc.)

Tables frequently joined by foreign keys.

When natural keys may change or are composite.

‚úÖ Use Natural Keys for:

Reference / lookup tables (e.g., CountryCode, ISO Code).

When key values are stable and meaningful (e.g., CountryCode = 'US').

‚ö†Ô∏è Even with surrogate keys:

Always add a UNIQUE constraint on the natural key column(s) to enforce business data integrity.

ALTER TABLE Employees
ADD CONSTRAINT UQ_Employees_Email UNIQUE (Email);


Avoid exposing surrogate keys in APIs ‚Äî use natural/business identifiers when interacting with users.

üîπ 7. Example: Combined Approach

Many real-world systems use both:

Surrogate key (for joins and indexing)

Natural key (for uniqueness)

Example:
CREATE TABLE Customers
(
    CustomerID INT IDENTITY(1,1) PRIMARY KEY,   -- Surrogate Key
    CustomerCode VARCHAR(10) NOT NULL,          -- Natural Key
    Name VARCHAR(100),
    Email VARCHAR(100) UNIQUE,
    CONSTRAINT UQ_Customers_CustomerCode UNIQUE (CustomerCode)
);


‚úÖ Why both?

CustomerID ensures fast joins and stable identity.

CustomerCode ensures business uniqueness.

üîπ 8. Interview / Real-World Notes
Question	Answer
What is a surrogate key?	A system-generated key used to uniquely identify a record, without business meaning.
Why prefer surrogate keys?	Simpler joins, better performance, and stable identity.
Can a table have both surrogate and natural keys?	Yes ‚Äî surrogate for relationships, natural for business uniqueness.
When would you use a natural key?	When the key is stable and meaningful (e.g., Country Code).
Example of surrogate key?	CustomerID INT IDENTITY(1,1)
Example of natural key?	Email, EmployeeCode, or NationalID.
Risk with surrogate keys?	Duplicate business data unless unique constraint is enforced.
‚úÖ In Summary
Concept	Primary (Natural) Key	Surrogate Key
Meaning	Derived from real-world data	Artificial (no meaning)
Changeable	Might change	Never changes
Performance	Slightly slower	Fast for joins/indexing
Storage	Larger	Compact
Use Case	Small, static datasets	Large, dynamic systems
Best Practice	Enforce UNIQUE on natural key	Always use surrogate key for relationships
üß† Rule of Thumb

‚ÄúUse surrogate keys for internal technical relationships and
natural keys for enforcing business rules.‚Äù
