üß† SQL Server Replication 
üîπ 1. What is Replication?

Replication in SQL Server is a technology that allows copying and distributing data and database objects from one database to another and keeping them in sync.

It supports data synchronization across multiple servers for:

High availability

Load balancing

Reporting

Data integration

Basic Concept

Publisher: The source database that makes data available for replication.

Subscriber: The destination database that receives replicated data.

Distributor: Manages the flow of data between publisher and subscriber (can be same as publisher or a separate server).

Publication: A collection of articles (tables, views, stored procedures) published for replication.

Article: The individual database object (e.g., table, view) in a publication.

Subscription: The request by a subscriber to receive published data.

Replication Architecture Overview
[Publisher] ---> [Distributor] ---> [Subscriber]
    (Source)         (Agent)          (Target)


Replication works through background agents that handle the data flow (Snapshot Agent, Log Reader Agent, Distribution Agent, Merge Agent).

üîπ 2. Why Replication?
Purpose	Description
Data Distribution	Distribute data to remote locations or reporting servers.
Load Balancing	Offload reporting queries to secondary servers.
Offline Processing	Synchronize data with mobile/offline users.
Disaster Recovery	Maintain a copy of critical databases.
Integration	Sync data between different SQL Servers or systems.
üîπ 3. Types of SQL Server Replication

SQL Server supports three main types of replication:

Type	Description	Data Flow Direction
Snapshot Replication	Takes a full snapshot of data at a point in time and copies it.	One-way (Publisher ‚Üí Subscriber)
Transactional Replication	Replicates data continuously in near real-time using transaction logs.	One-way (Publisher ‚Üí Subscriber)
Merge Replication	Allows changes at both publisher and subscriber; merges updates and resolves conflicts.	Two-way (bi-directional)
üîπ 4. Snapshot Replication
Definition

Snapshot replication distributes a complete copy of the data (a snapshot) from the publisher to the subscriber at scheduled intervals.

It does not track incremental changes ‚Äî every time it runs, the entire dataset is copied again.

When to Use

‚úÖ Data changes infrequently
‚úÖ Small volume of data
‚úÖ High latency is acceptable
‚úÖ Initial data load before transactional replication

Example Scenario

You want to replicate a small reference table (Dim_Country) to reporting servers weekly.

How It Works

Snapshot Agent takes a snapshot of the data (creates schema + data files).

Distribution Agent copies those files to the subscriber.

Subscriber replaces its existing data with the new snapshot.

T-SQL Example
-- Create Publication (Snapshot)
EXEC sp_addpublication 
    @publication = N'Snapshot_Pub',
    @publication_type = N'snapshot',
    @status = N'active',
    @allow_push = N'true';

-- Add an Article (Table)
EXEC sp_addarticle 
    @publication = N'Snapshot_Pub',
    @article = N'Dim_Country',
    @source_object = N'Dim_Country';

-- Create Snapshot Agent Job
EXEC sp_addpublication_snapshot 
    @publication = N'Snapshot_Pub',
    @job_login = N'sa',
    @job_password = N'P@ssword123';

-- Add Subscriber
EXEC sp_addsubscription 
    @publication = N'Snapshot_Pub',
    @subscriber = N'ReportingServer',
    @destination_db = N'ReportingDB';

Advantages

‚úÖ Simple setup and maintenance
‚úÖ No need to track ongoing changes
‚úÖ Ideal for static data

Disadvantages

‚ùå High overhead for large datasets
‚ùå Full data copy every time
‚ùå No real-time synchronization

üîπ 5. Transactional Replication
Definition

Transactional replication replicates data continuously from the publisher to the subscriber as transactions occur.

It uses the SQL Server transaction log to capture and deliver changes (INSERT, UPDATE, DELETE) almost in real-time.

When to Use

‚úÖ Need near real-time data synchronization
‚úÖ OLTP (Online Transaction Processing) systems
‚úÖ Reporting or data warehousing
‚úÖ Minimal latency required

How It Works

Log Reader Agent reads committed transactions from the publisher‚Äôs transaction log.

It writes them to the distribution database.

Distribution Agent applies those changes to the subscriber.

T-SQL Example
-- Create Publication (Transactional)
EXEC sp_addpublication 
    @publication = N'Trans_Pub',
    @publication_type = N'transactional',
    @status = N'active';

-- Add Table to Publication
EXEC sp_addarticle 
    @publication = N'Trans_Pub',
    @article = N'SalesOrders',
    @source_object = N'SalesOrders';

-- Add Subscriber
EXEC sp_addsubscription 
    @publication = N'Trans_Pub',
    @subscriber = N'ReportingServer',
    @destination_db = N'ReportingDB';

Advantages

‚úÖ Real-time or near real-time data sync
‚úÖ Minimal data transfer (only changes)
‚úÖ High performance for large datasets
‚úÖ Reliable and consistent replication

Disadvantages

‚ùå One-way replication (subscriber cannot update)
‚ùå Setup complexity
‚ùå Requires good network connectivity
‚ùå Maintenance overhead

Example Scenario

You have a live sales system and want to replicate data to a reporting server with minimal delay for dashboards.

Diagram
[Publisher] --(Log Reader Agent)--> [Distributor] --(Distribution Agent)--> [Subscriber]

üîπ 6. Merge Replication
Definition

Merge replication allows both publisher and subscriber to make changes independently, and later synchronizes them by merging data and resolving conflicts.

It‚Äôs used in mobile, distributed, or occasionally connected environments.

When to Use

‚úÖ Data changes on both publisher and subscriber
‚úÖ Subscribers work offline (e.g., field laptops, mobile devices)
‚úÖ Need bidirectional synchronization

How It Works

Initial snapshot is sent to subscriber.

Both publisher and subscriber make changes independently.

Merge Agent tracks changes using triggers and system tables.

During synchronization, conflicts are detected and resolved using conflict resolvers.

T-SQL Example
-- Create Merge Publication
EXEC sp_addpublication 
    @publication = N'Merge_Pub',
    @publication_type = N'merge',
    @status = N'active';

-- Add Table to Publication
EXEC sp_addmergearticle 
    @publication = N'Merge_Pub',
    @article = N'Customer',
    @source_object = N'Customer';

-- Add Subscriber
EXEC sp_addmergesubscription 
    @publication = N'Merge_Pub',
    @subscriber = N'MobileServer',
    @subscriber_db = N'MobileDB';

Advantages

‚úÖ Bidirectional replication (both sides can update)
‚úÖ Works well for offline / occasionally connected systems
‚úÖ Automatic conflict detection & resolution

Disadvantages

‚ùå More complex setup and maintenance
‚ùå Conflict handling overhead
‚ùå Slower performance for large datasets

Example Scenario

A retail chain where each store has its own SQL Server and must sync sales data with head office daily.

Conflict Resolution Example

If both publisher and subscriber update the same row:

Conflict resolver decides which change wins (based on priority, timestamp, or custom logic).

üîπ 7. Comparison Summary
Feature	Snapshot	Transactional	Merge
Use Case	Static, small datasets	Real-time reporting	Mobile/disconnected apps
Data Flow	One-way	One-way	Two-way
Latency	High	Low (real-time)	Medium (sync-based)
Change Tracking	None	Transaction log	Triggers & metadata
Conflict Resolution	N/A	N/A	Yes
Setup Complexity	Low	Medium	High
Performance	Slow for large data	Fast, continuous	Slower due to merge process
üîπ 8. Agents Used in Replication
Agent	Function
Snapshot Agent	Prepares snapshot files for initial replication.
Log Reader Agent	Reads transaction log for transactional replication.
Distribution Agent	Moves data from distributor to subscriber.
Merge Agent	Synchronizes data and resolves conflicts for merge replication.
Queue Reader Agent	Used in queued transactional replication for updates.
üîπ 9. Monitoring Replication

You can monitor replication using:

Replication Monitor (SSMS)

System tables & views:

msreplication_subscriptions

msdistribution_agents

MSreplication_monitordata

System stored procedures:

EXEC sp_replmonitorhelppublisher;
EXEC sp_replmonitorhelpsubscription;

üîπ 10. Common Replication Issues
Issue	Cause	Solution
Data not updating	Agent stopped or blocked	Restart agent, check log
Latency	Network or distributor overload	Optimize distributor
Conflicts	Merge replication conflict	Adjust resolver
Missing articles	Schema changes not published	Reinitialize subscription
Permissions error	SQL Agent login issues	Grant necessary rights
üîπ 11. Best Practices

‚úÖ Use transactional replication for near-real-time reporting.
‚úÖ Schedule snapshot replication for infrequent sync needs.
‚úÖ Use merge replication only when both sides modify data.
‚úÖ Keep distributor on a separate server for large-scale systems.
‚úÖ Regularly monitor replication latency and agent health.
‚úÖ Avoid schema changes during replication unless necessary.
‚úÖ Backup publisher, distributor, and subscriber databases regularly.
‚úÖ Document and version replication settings.

üîπ 12. Real-World Example: Reporting Server Setup

Scenario:
You have an OLTP database SalesDB and want to replicate live sales data to a read-only reporting server ReportDB.

Solution: Transactional Replication

Publisher: SalesDB

Distributor: DistributorDB

Subscriber: ReportDB

Steps (simplified):

-- 1. Enable replication
EXEC sp_replicationdboption 'SalesDB', 'publish', true;

-- 2. Create publication
EXEC sp_addpublication @publication = 'SalesTrans', @publication_type = 'transactional';

-- 3. Add article
EXEC sp_addarticle @publication = 'SalesTrans', @article = 'Orders', @source_object = 'Orders';

-- 4. Add subscription
EXEC sp_addsubscription @publication = 'SalesTrans', @subscriber = 'ReportServer', @destination_db = 'ReportDB';


‚úÖ Result: Any new sales record in SalesDB appears in ReportDB in near real-time.

üîπ 13. Interview Questions (4+ Years Level)
Question	Answer
What is replication in SQL Server?	A process of copying and synchronizing data between databases.
Name the 3 main types of replication.	Snapshot, Transactional, Merge.
Which replication is best for real-time reporting?	Transactional replication.
Which replication supports bidirectional updates?	Merge replication.
What is a publication and article?	Publication = group of data objects; Article = individual table or view.
What agent reads from the transaction log?	Log Reader Agent.
What is a distributor?	A server that manages the data flow between publisher and subscriber.
How are conflicts handled in merge replication?	Using conflict resolvers (default or custom).
Can you replicate schema changes?	Yes, if the publication allows schema changes.
How to monitor replication health?	Replication Monitor or sp_replmonitorhelppublisher.
üèÅ Key Takeaways

Replication = data distribution mechanism across SQL Servers.

Snapshot Replication ‚Üí periodic full copies.

Transactional Replication ‚Üí real-time incremental updates.

Merge Replication ‚Üí two-way sync with conflict resolution.

Proper agent configuration and monitoring ensure reliability.

Ideal for reporting, mobile sync, and distributed systems.
