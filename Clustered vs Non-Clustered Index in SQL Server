📘 Clustered vs Non-Clustered Index in SQL Server
🔹 1. Introduction: What is an Index?

An index in a database is a data structure (similar to an index in a book) that improves the speed of data retrieval operations on a table at the cost of additional writes and storage for maintaining the index.

In SQL Server, an index is created on one or more columns of a table or view to help the database engine find rows faster.

🧩 Basic Definition

An index is like a lookup table that points to the physical location of data.

SQL Server uses B-Tree (Balanced Tree) structure for indexing.

⚙️ General Benefits
Benefit	Description
Faster SELECT queries	Reduces data scanning time
Improves JOIN performance	Especially on key columns
Helps enforce constraints	Used in PRIMARY KEY, UNIQUE constraints
Speeds up ORDER BY / GROUP BY	Especially for sorted retrieval
⚠️ Drawbacks
Drawback	Description
Slower INSERT/UPDATE/DELETE	Because indexes must be maintained
Consumes extra disk space	Non-clustered indexes store pointers
Poor performance if overused	Too many indexes can degrade performance
🔹 2. Clustered Index
🧩 Definition

A Clustered Index determines the physical order of data in a table.
In other words, the data rows are stored in the same order as the index.

Each table can have only one clustered index, because there can be only one physical ordering.

The table data itself is the clustered index.

📊 B-Tree Structure (Clustered)
Root Node → Intermediate Nodes → Leaf Nodes (Actual Data)


Leaf nodes of a clustered index contain actual data pages.

When you query by clustered index key, the engine directly retrieves data — no extra lookup needed.

🧩 Syntax Example
-- Creating a table with a clustered index
CREATE TABLE Employees (
    EmpID INT PRIMARY KEY,  -- Primary Key automatically creates a Clustered Index
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    Salary DECIMAL(10,2)
);


OR explicitly:

CREATE CLUSTERED INDEX IX_Employees_EmpID
ON Employees(EmpID);

🧮 Example: How It Works

If we query:

SELECT * FROM Employees WHERE EmpID = 101;


👉 SQL Server directly navigates the clustered B-Tree and retrieves the actual row because data is physically ordered by EmpID.

🧱 Key Characteristics
Feature	Description
Physical order	Data is stored in the order of the index
Number per table	Only one allowed
Storage	Data pages themselves are the leaf nodes
Speed	Very fast for range and equality searches on indexed column
Default	Created automatically for PRIMARY KEY (if not otherwise specified)
🔹 3. Non-Clustered Index
🧩 Definition

A Non-Clustered Index creates a separate structure (B-Tree) that contains:

Indexed column values.

A pointer (row locator) to the actual data row in the table.

Data in the table is not physically sorted by the non-clustered index.

📊 B-Tree Structure (Non-Clustered)
Root Node → Intermediate Nodes → Leaf Nodes (Index Pages with Row Locators)


Leaf nodes of a non-clustered index do not contain actual data.

Instead, they contain:

Clustered key (if table has a clustered index), or

Row ID (RID) (if the table is a heap — no clustered index).

🧩 Syntax Example
CREATE NONCLUSTERED INDEX IX_Employees_LastName
ON Employees(LastName);


Now, the database can quickly find employees by their last name.

🧮 Example: How It Works

Query:

SELECT Salary FROM Employees WHERE LastName = 'Smith';


Steps:

SQL Server looks up Smith in the non-clustered index.

Finds pointer (row locator) to actual data.

Retrieves row from clustered index (or heap).

This process is called a key lookup (also known as bookmark lookup).

🧱 Key Characteristics
Feature	Description
Physical order	Data not stored in index order
Number per table	Multiple allowed
Storage	Separate from data pages
Speed	Fast for specific column lookups
Pointers	Contains row locators to data
Default	Created automatically for UNIQUE constraints (if no clustered index exists)
🔹 4. Clustered vs Non-Clustered Index — Comparison Table
Feature	Clustered Index	Non-Clustered Index
Physical Order	Reorders the actual data rows	Maintains separate structure
Storage	Data pages are leaf nodes	Leaf nodes contain pointers to data
Count per Table	Only one	Many (up to 999)
Speed (Select)	Faster (no lookup needed)	Slightly slower (requires lookup)
Speed (Insert/Update/Delete)	Slower (rearranges data)	Faster for updates to non-indexed columns
Ideal Use Case	Frequently used for range queries and sorting	Used for searching specific columns
Example Column	Primary Key (e.g., EmpID)	Searchable columns (e.g., Email, LastName)
Size	Larger, as it stores actual data	Smaller, as it stores keys and pointers
Dependency	None	Depends on clustered index or heap
🔹 5. Composite Indexes

Indexes can be created on multiple columns (up to 16 columns).

🧩 Example:
CREATE NONCLUSTERED INDEX IX_Orders_CustID_OrderDate
ON Orders(CustomerID, OrderDate);


✅ Helps when queries filter or sort by CustomerID and OrderDate together.

⚠️ Important:

Order of columns matters.

(CustomerID, OrderDate) ≠ (OrderDate, CustomerID).

🔹 6. Covering Index

A covering index is a non-clustered index that contains all the columns needed by a query — so SQL Server doesn’t need to access the actual data row.

🧩 Example:
CREATE NONCLUSTERED INDEX IX_Employees_Covering
ON Employees(LastName)
INCLUDE (FirstName, Salary);


Query:

SELECT FirstName, Salary FROM Employees WHERE LastName = 'Brown';


✅ This query is fully covered by the index, meaning:

SQL Server uses only the index (no key lookup).

Better performance.

🔹 7. Heap Tables vs Clustered Tables
Type	Description
Heap Table	Table without a clustered index; data stored unordered.
Clustered Table	Table with a clustered index; data stored physically ordered.
🧩 Example:
CREATE TABLE LogEntries (
    LogID INT IDENTITY(1,1),
    LogMessage NVARCHAR(200)
);
-- Heap (no clustered index)


Adding:

CREATE CLUSTERED INDEX IX_LogEntries_LogID ON LogEntries(LogID);


Now becomes a clustered table.

🔹 8. Performance Impact
⚡ Clustered Index Performance

Best for range queries, e.g.:

SELECT * FROM Sales WHERE SaleDate BETWEEN '2024-01-01' AND '2024-12-31';


Not good for frequent insertions in the middle of key order (causes page splits).

⚡ Non-Clustered Index Performance

Best for point lookups or specific searches.

Degrades if many indexes exist or if large updates occur frequently.

🔹 9. Best Practices
Area	Best Practice	Reason
Clustered Index	Create on columns that are unique, narrow, and static	Ensures minimal data movement
Non-Clustered Index	Create on frequently searched columns	Improves SELECT performance
Avoid Over-Indexing	Each DML operation must maintain all indexes	Increases overhead
Use INCLUDE	For covering queries	Reduces lookups
Monitor Fragmentation	Use ALTER INDEX REORGANIZE/REBUILD	Maintains performance
Composite Index Order	Place most selective column first	Optimizes index usage
Primary Key Default	Usually becomes Clustered	Change only if table is append-only (e.g., logs)
🔹 10. Real-World Example
-- Create Customer table with clustered and non-clustered indexes
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY CLUSTERED,
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    City NVARCHAR(50),
    Email NVARCHAR(100)
);

-- Non-clustered index on frequently searched column
CREATE NONCLUSTERED INDEX IX_Customers_City
ON Customers(City)
INCLUDE (FirstName, LastName);

Query Example
SELECT FirstName, LastName FROM Customers WHERE City = 'New York';


✅ The query uses IX_Customers_City
✅ No key lookup needed because of INCLUDE columns.

🔹 11. Interview Quick Reference
Question	Short Answer
How many clustered indexes per table?	One
How many non-clustered indexes per table?	Up to 999
Does clustered index store data physically sorted?	Yes
Does non-clustered index store data separately?	Yes
What is a covering index?	Index that includes all needed columns for a query
Clustered index default?	Created on Primary Key if none exists
Difference in leaf nodes?	Clustered = data pages, Non-clustered = pointers
Can you have a non-clustered index on a heap table?	Yes (points to RID)
What causes fragmentation?	Inserts/updates in clustered index order

✅ In Summary

Concept	Clustered Index	Non-Clustered Index
Physical Storage	Data stored in index order	Separate index structure
Data Access	Direct	Indirect (lookup required)
Typical Use	Primary key, range queries	Search columns, filtering
Quantity	1 per table	Many per table
Example	CREATE CLUSTERED INDEX IX_EmpID	CREATE NONCLUSTERED INDEX IX_LastName
