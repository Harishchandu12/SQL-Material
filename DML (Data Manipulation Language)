DML (Data Manipulation Language) consists of SQL commands used to manipulate data stored in database tables ‚Äî meaning, you can insert, retrieve, update, and delete data.

üëâ Unlike DDL (Data Definition Language), which changes the structure of the database, DML works with the actual data inside the tables.

üîπ Common DML Commands
Command  	Full Form                       	Purpose
SELECT	  Retrieve data	            Fetches data from tables
INSERT	  Insert data	              Adds new rows into a table
UPDATE	  Update data             	Modifies existing data in a table
DELETE	  Delete data	              Removes data from a table

Let‚Äôs use a sample table called Employees for examples üëá

EmpID            	EmpName	        Department	            Salary
1                	John           	HR	                    50000
2               	Alice         	IT	                    70000
3               	Bob           	IT	                    60000
4	                Eve	            Finance	                55000

üîπ 1. SELECT ‚Äì Retrieve Data
‚û§ Purpose:

Used to fetch data from one or more tables.

‚û§ Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE condition
ORDER BY column ASC|DESC;

‚û§ Examples:
Example 1: Retrieve all columns
SELECT * FROM Employees;

Example 2: Retrieve specific columns
SELECT EmpName, Salary FROM Employees;

Example 3: Filter data with WHERE
SELECT * FROM Employees
WHERE Department = 'IT';

Example 4: Sort results
SELECT * FROM Employees
ORDER BY Salary DESC;

Example 5: Aggregate data
SELECT Department, AVG(Salary) AS AvgSalary
FROM Employees
GROUP BY Department;

üîπ 2. INSERT ‚Äì Add New Data
‚û§ Purpose:

Used to insert new records (rows) into a table.

‚û§ Syntax:
INSERT INTO table_name (column1, column2, ...)
VALUES (value1, value2, ...);

‚û§ Examples:
Example 1: Insert one record
INSERT INTO Employees (EmpID, EmpName, Department, Salary)
VALUES (5, 'Charlie', 'Marketing', 65000);

Example 2: Insert multiple rows
INSERT INTO Employees (EmpID, EmpName, Department, Salary)
VALUES
(6, 'David', 'HR', 52000),
(7, 'Sophia', 'IT', 72000);

üîπ 3. UPDATE ‚Äì Modify Existing Data
‚û§ Purpose:

Used to update or modify existing records in a table.

‚û§ Syntax:
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;


‚ö†Ô∏è Important: Without a WHERE clause, all rows will be updated!

‚û§ Examples:
Example 1: Update one record
UPDATE Employees
SET Salary = 75000
WHERE EmpName = 'Alice';

Example 2: Update multiple columns
UPDATE Employees
SET Department = 'Operations', Salary = 62000
WHERE EmpID = 3;

üîπ 4. DELETE ‚Äì Remove Data
‚û§ Purpose:

Used to delete existing records from a table.

‚û§ Syntax:
DELETE FROM table_name
WHERE condition;


‚ö†Ô∏è Caution: Without WHERE, all rows will be deleted!

‚û§ Examples:
Example 1: Delete one record
DELETE FROM Employees
WHERE EmpID = 4;

Example 2: Delete all records (keep table structure)
DELETE FROM Employees;

üîπ Summary Table
Command	                 Purpose	                                              Example
SELECT              	Retrieve data                                  	SELECT * FROM Employees;
INSERT	              Add new data	                                  INSERT INTO Employees VALUES (1, 'John', 'HR', 50000);
UPDATE	             Modify existing data                           	UPDATE Employees SET Salary = 70000 WHERE EmpID = 2;
DELETE             	Remove data	                                      DELETE FROM Employees WHERE EmpID = 3;

üîπ Difference Between DDL and DML
Feature	DDL	DML
Full Form	                                            Data Definition Language                                                   	Data Manipulation Language
Affects                                             	Structure of database	                                                      Data inside tables
Examples	                                            CREATE, ALTER, DROP, TRUNCATE                                             	SELECT, INSERT, UPDATE, DELETE
Auto-commit	                                          Yes (saves automatically)	                                                  No (needs COMMIT to save changes)
Rollback	                                            Not always possible	                                                        Possible before COMMIT

üîπ Example of All DML Commands Together
-- Insert a new record
INSERT INTO Employees (EmpID, EmpName, Department, Salary)
VALUES (8, 'Grace', 'Finance', 60000);

-- Retrieve all employees
SELECT * FROM Employees;

-- Update Grace‚Äôs salary
UPDATE Employees
SET Salary = 65000
WHERE EmpName = 'Grace';

-- Delete Bob‚Äôs record
DELETE FROM Employees
WHERE EmpName = 'Bob';


‚úÖ In short:

DML = Commands that work with the data itself ‚Äî
SELECT (read), INSERT (add), UPDATE (change), DELETE (remove).
