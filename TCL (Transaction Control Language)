TCL (Transaction Control Language) is a set of SQL commands used to manage transactions within a database.

A transaction is a single logical unit of work that may consist of one or more SQL statements â€” for example:

Inserting money into one account and deducting it from another (bank transfer).

ðŸ‘‰ TCL commands ensure data consistency, accuracy, and integrity by controlling how changes made by DML commands (INSERT, UPDATE, DELETE) are saved or undone.

ðŸ”¹ Common TCL Commands

Command	                                                                           Purpose
COMMIT	                                                              Saves all changes made during the transaction
ROLLBACK                                                            	Undoes changes made during the transaction
SAVEPOINT	                                                            Sets a point to which you can roll back later
SET TRANSACTION                                                     	Defines properties for a transaction (optional, advanced use)

ðŸ”¹ 1. COMMIT
âž¤ Purpose:

Used to permanently save all changes made during the current transaction.

âž¤ Syntax:
COMMIT;

âž¤ Example:
INSERT INTO Employees (EmpID, EmpName, Department, Salary)
VALUES (9, 'Henry', 'Sales', 58000);

UPDATE Employees
SET Salary = 60000
WHERE EmpID = 9;

COMMIT;


âœ… After COMMIT, the changes are permanent â€” you cannot undo them with ROLLBACK.

ðŸ”¹ 2. ROLLBACK
âž¤ Purpose:

Used to undo all the changes made in the current transaction before COMMIT.

âž¤ Syntax:
ROLLBACK;

âž¤ Example:
UPDATE Employees
SET Salary = 90000
WHERE EmpID = 2;

-- Oops! That was a mistake
ROLLBACK;


âœ… All changes made since the last COMMIT or SAVEPOINT are undone.

ðŸ”¹ 3. SAVEPOINT
âž¤ Purpose:

Used to create a temporary point within a transaction that you can roll back to without undoing the entire transaction.

âž¤ Syntax:
SAVEPOINT savepoint_name;

âž¤ Example:
BEGIN TRANSACTION;

INSERT INTO Employees VALUES (10, 'Ivy', 'HR', 50000);
SAVEPOINT SP1;

UPDATE Employees SET Salary = 70000 WHERE EmpID = 1;
SAVEPOINT SP2;

DELETE FROM Employees WHERE EmpID = 3;

-- Undo only up to SP2
ROLLBACK TO SP2;

COMMIT;


âœ… This example:

Inserts Ivy â†’ (SP1 created)

Updates Johnâ€™s salary â†’ (SP2 created)

Deletes Bob â†’ mistake
â†’ Rolled back only to SP2, so the delete is undone, but insert and update stay.

ðŸ”¹ 4. SET TRANSACTION (optional, advanced)
âž¤ Purpose:

Used to specify characteristics of a transaction, such as read/write mode or isolation level.

âž¤ Example:
SET TRANSACTION READ WRITE;


or

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;


(Used mostly in advanced database management scenarios.)

ðŸ”¹ Real-World Example (Bank Transfer)

Imagine transferring â‚¹1000 from Account A to Account B:

BEGIN TRANSACTION;

UPDATE Accounts
SET Balance = Balance - 1000
WHERE AccountID = 'A101';

UPDATE Accounts
SET Balance = Balance + 1000
WHERE AccountID = 'B202';

-- If both updates succeed
COMMIT;

-- If something fails (e.g., system error)
ROLLBACK;


âœ… Either both operations happen (transfer successful) or none happen (rolled back) â€” ensuring data consistency.

ðŸ”¹ Summary Table

Command                         	Description	                                              Example
COMMIT	                      Permanently saves changes	                                     COMMIT;
ROLLBACK	                    Undoes uncommitted changes	                                   ROLLBACK;
SAVEPOINT                       	Creates a checkpoint                                     	SAVEPOINT SP1;
ROLLBACK TO SAVEPOINT	        Undoes changes up to a savepoint	                            ROLLBACK TO SP1;
SET TRANSACTION	              Sets transaction properties	                                  SET TRANSACTION READ WRITE;

ðŸ”¹ Relationship Between DML and TCL
DML Command	                                               What TCL Does
INSERT, UPDATE, DELETE	                            These modify data (but changes are temporary)
COMMIT	                                            Makes the changes permanent
ROLLBACK	                                          Reverses the changes (if not committed yet)

ðŸ”¹ Quick Visualization
BEGIN TRANSACTION
   â†“
   [INSERT / UPDATE / DELETE]
   â†“
SAVEPOINT (optional)
   â†“
   â”œâ”€â”€ COMMIT â†’ Save permanently
   â””â”€â”€ ROLLBACK â†’ Undo changes


âœ… In short:

TCL = Transaction Control Language
It ensures safe, consistent, and reliable changes to your data.

ðŸ”¸ COMMIT â†’ Save
ðŸ”¸ ROLLBACK â†’ Undo
ðŸ”¸ SAVEPOINT â†’ Checkpoint
